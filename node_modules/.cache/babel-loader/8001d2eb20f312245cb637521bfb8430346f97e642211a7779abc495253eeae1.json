{"ast":null,"code":"var _jsxFileName = \"/Users/danbohdan/Desktop/FormikTestForm/formik-test-form/src/App.js\";\nimport Form from './Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl\",\n      children: \"Accessible instant feeback with Formik 2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg\",\n      children: \"Instant feedback during typing can be extremely helpful in certain situations. For example, checking the validity (or availability) of a username shouldn't require the user to resubmit the form (multiple times). Providing instant feedback while users are typing can allow them to experiment more easily until they find valid input value (like a suitable username). Note: This isn't always optimal, use your judgement.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"example\",\n      children: /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-md mt-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Note:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), \" The displayed feedback message in this example is coded using a \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: `<div>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 19\n      }, this), \" element that has an \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: `aria-live`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 62\n      }, this), \" attribute with the value \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"polite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 32\n      }, this), \". The contents of this so called \\\"live region\\\" are conveyed to screen readers and other assistive technology. The value \\\"polite\\\" de-emphasizes the importance of the message and does not cause screen readers to interrupt their current tasks to read aloud this message. Thus the message is only read once when the user stops typing rather than on every keystroke that the user makes.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: [\"Example adapted from\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.w3.org/WAI/tutorials/forms/notifications/\",\n          target: \"blank\",\n          rel: \"noopener noreferrer\",\n          children: \"W3C WAI Web Accessibility Tutorials\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Form","jsxDEV","_jsxDEV","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","_c","$RefreshReg$"],"sources":["/Users/danbohdan/Desktop/FormikTestForm/formik-test-form/src/App.js"],"sourcesContent":["import Form from './Form';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <h1 className=\"text-4xl\">Accessible instant feeback with Formik 2</h1>\n            <p className=\"text-lg\">\n                Instant feedback during typing can be extremely helpful in certain situations. For\n                example, checking the validity (or availability) of a username shouldn't require the\n                user to resubmit the form (multiple times). Providing instant feedback while users\n                are typing can allow them to experiment more easily until they find valid input\n                value (like a suitable username). Note: This isn't always optimal, use your\n                judgement.\n            </p>\n            <div className=\"example\">\n                <Form />\n            </div>\n            <p className=\"text-md mt-1\">\n                <strong>Note:</strong> The displayed feedback message in this example is coded using\n                a <code>{`<div>`}</code> element that has an <code>{`aria-live`}</code> attribute\n                with the value <code>polite</code>. The contents of this so called \"live region\" are\n                conveyed to screen readers and other assistive technology. The value \"polite\"\n                de-emphasizes the importance of the message and does not cause screen readers to\n                interrupt their current tasks to read aloud this message. Thus the message is only\n                read once when the user stops typing rather than on every keystroke that the user\n                makes.\n            </p>\n            <p className=\"text-sm\">\n                <i>\n                    Example adapted from{' '}\n                    <a\n                        href=\"https://www.w3.org/WAI/tutorials/forms/notifications/\"\n                        target=\"blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        W3C WAI Web Accessibility Tutorials\n                    </a>\n                </i>\n            </p>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EACX,oBACID,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBH,OAAA;MAAIE,SAAS,EAAC,UAAU;MAAAC,QAAA,EAAC;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtEP,OAAA;MAAGE,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAOvB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJP,OAAA;MAAKE,SAAS,EAAC,SAAS;MAAAC,QAAA,eACpBH,OAAA,CAACF,IAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eACNP,OAAA;MAAGE,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACvBH,OAAA;QAAAG,QAAA,EAAQ;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,qEACpB,eAAAP,OAAA;QAAAG,QAAA,EAAQ;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,yBAAqB,eAAAP,OAAA;QAAAG,QAAA,EAAQ;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,8BACxD,eAAAP,OAAA;QAAAG,QAAA,EAAM;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,qYAMtC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJP,OAAA;MAAGE,SAAS,EAAC,SAAS;MAAAC,QAAA,eAClBH,OAAA;QAAAG,QAAA,GAAG,sBACqB,EAAC,GAAG,eACxBH,OAAA;UACIQ,IAAI,EAAC,uDAAuD;UAC5DC,MAAM,EAAC,OAAO;UACdC,GAAG,EAAC,qBAAqB;UAAAP,QAAA,EAC5B;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEd;AAACI,EAAA,GAvCQV,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}